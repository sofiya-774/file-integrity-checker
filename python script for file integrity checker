import hashlib
import os

def calculate_hash(file_path, algorithm='sha256'):
    """Calculate hash of a file using the given algorithm (default: sha256)."""
    hash_func = hashlib.new(algorithm)
    
    try:
        with open(file_path, 'rb') as f:
            while chunk := f.read(8192):
                hash_func.update(chunk)
        return hash_func.hexdigest()
    except FileNotFoundError:
        print(f"Error: File not found: {file_path}")
        return None

def save_hash(file_path, hash_value, db_path="hashes.txt"):
    """Save file path and hash value to a database (text file)."""
    with open(db_path, 'a') as db:
        db.write(f"{file_path},{hash_value}\n")

def load_hashes(db_path="hashes.txt"):
    """Load stored hashes """
    hashes = {}
    if os.path.exists(db_path):
        with open(db_path, 'r') as db:
            for line in db:
                file_path, hash_value = line.strip().split(',')
                hashes[file_path] = hash_value
    return hashes

def check_integrity(file_path, db_path="hashes.txt"):
    """Check if the file's hash has changed."""
    cur_hash = calculate_hash(file_path)
    stored_hash = load_hashes(db_path)

    if file_path not in stored_hash:
        print(f"[NEW] File not in db: {file_path}")
        save_hash(file_path, cur_hash, db_path)
    elif stored_hash[file_path] != cur_hash:
        print(f"[MODIFIED] File intg compromised: {file_path}")
        print(f"Old hash: {stored_hash[file_path]}")
        print(f"New hash: {cur_hash}")
    else:
        print(f"[UNCHANGED] File is intact: {file_path}")


Example
if __name__ == "__main__":
    file_check = input("Enter the file path to check integriety: ").strip()
    check_integrity(file_check)
